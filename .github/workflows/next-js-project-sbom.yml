# This is a basic workflow to help you get started with Actions

name: Next JS Project SBOM SPDX
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Next Js Project Scan
        uses: anchore/scan-action@v3
        with:
          path: "./"
          fail-build: false
      - name: Set output variables
        id: vars
        run: |
          publishTag="latest"
          PACKAGE_VERSION=$(cat package.json \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[",]//g' | xargs)
          if [[ "$GITHUB_REF" == *\/release ]]
          
          then
            publishTag="latest"
            echo ::set-output name=filename::"${PACKAGE_VERSION}-latest"
          else
            publishTag="beta"
            echo ::set-output name=filename::"${PACKAGE_VERSION}-beta.${GITHUB_RUN_NUMBER}"
          fi
      - name: Next Js Project SBOM Report [SPDX]
        uses: anchore/sbom-action@v0
        with:
          format: spdx
          artifact-name: ${{ steps.vars.outputs.filename }}.spdx
      - name: Publish report [SPDX]
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.spdx$"
      - name: Next Js Project SBOM Report [CycloneDx]
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx
          artifact-name: ${{ steps.vars.outputs.filename }}.cyclonedx
      - name: Publish report [CycloneDx]
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.cyclonedx$"
      - name: Download artifact for SPDX Report
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.vars.outputs.filename }}.spdx
      - name: Download artifact for CycloneDx Report
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.vars.outputs.filename }}.cyclonedx
      - name: Create folder/Clear folder
        run: mkdir -p ./_devsec/ && rm -rf ./_devsec/*.* || true
      - name: Move Report [SPDX]
        run: mv ${{ steps.vars.outputs.filename }}.spdx "./_devsec/${{steps.vars.outputs.filename}}.spdx"
      - name: Move Report [CycloneDx]
        run: mv ${{ steps.vars.outputs.filename }}.cyclonedx "./_devsec/${{steps.vars.outputs.filename}}.cyclonedx"
      - name: Build the container image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
      - name: Scan docker image using TERN
        uses: philips-labs/tern-action@v1.1.0
        id: scan
        with:
          image: localbuild/testimage:latest
          format: spdxtagvalue
          output: ${{ steps.vars.outputs.filename }}.spdx
      - name: Create/Clear folder
        run: mkdir -p ./docker/ && rm -rf ./docker/*.* || true
      - name: Docker CycloneDx report
        run: npm install -g @appthreat/cdxgen && cdxgen localbuild/testimage:latest -o ./docker/${{steps.vars.outputs.filename}}.xml -t docker
      - name: Move Report
        run: mv ${{ steps.vars.outputs.filename }}.spdx "./docker/${{steps.vars.outputs.filename}}.spdx"
      - name: Commit report
        run: |
          git pull
          git add .
          git config --global user.email "ukrocks.mehta@gmail.com"
          git config --global user.name "Utkarsh Mehta"
          git commit -am "Automated report"
          git push
